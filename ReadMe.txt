Omnicom Test Solution SummaryFiles- Project is called Omnicom.  Project structure is from the Omnicom directory.  Pom.xml is in the module ‘root’.- All files required for execution are stored in the Omnicom project directory (i.e the database and the input .csv files).  NOTE THE INPUT CSV FILES ARE CURRENTLY ZIPPED AND NEED UNCOMPRESSING TO USE.- Database is called onmiDatabase.db.  An empty database is in the project directory.Jar file Execution- The executable jar is called Omnicom-1.0-SNAPSHOT-jar-with-dependencies.jar- Execution assumes all files (database, position & image) are in the same directory as the jar file.- Alternatively, all files should be in the project root directory (Omnicom) if the code is being run from the IDE.- Note: Each execution of the jar will clean the database before writing to it (but does not compress it).Notes on Assumptions & Program FlowPosition csv file gave a distance and a velocity along with a .net tick time which was constant for all records and assumed to reference Time Zero.Initial review of file highlighted;- No geodetic information for the Lat / Long coordinates.- No given measurement system for the distance and velocity measurements.First needed to determine the measurement system.Used simple Haversine method to derive a distance between lat/long coordinates.  But accuracy of Haversine method is not enough for the precision required.Determined that distance most likely to be meters and the velocity in meters-per-second based on the overall distance travelled and the estimated time taken (from the Image .csv file using the hour/minute/second/frame fields).Once distance & velocity units were determined, time could be derived; Time = Distance/Velocity.Image file contains hour/minute/second/frame information and we are told the imaging sample rate is 25 frames per second; 40 milliseconds per frame.This information allows the incremental time to be derived with the frame field acting as a measure of milliseconds.To solve the problem, have therefore made the following assumptions;- Distance units are meters- Velocity units are meters-per-second- The .net tick time is Tzero- Image file begins at the same time as Tzero in the position file.Solution attempts to process the files before writing to the database to minimise read/write time.Steps;1. Create objects to represent position and image records.2. Read position file.3. Compute time for each record based on Tzero assumption and calculation of travel time based on distance / velocity.4. Write position records to database.5. Read back position records as new object (ShortPositionRecord).  This format uses less memory.6. Resample position records to regular time series with 40 ms sample rate.7. Linear interpolation of lat/long to the new time series.8. The resampled position file now has the same sample rate as the image file and based on the hour/minute/second/frame reference in the image file can be used to give each image a lat/long & time reference.9. Read Image file and process, adding lat/long and time before writing to database.